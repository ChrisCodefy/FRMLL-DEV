{% schema %}
{
  "name": "Carrusel de productos",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título del carrusel",
      "default": "Carrusel de productos"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Colección de productos"
    },
    {
      "type": "range",
      "id": "image_width",
      "label": "Ancho de las imágenes (px)",
      "min": 100,
      "max": 1000,
      "step": 10,
      "default": 600
    },
    {
      "type": "range",
      "id": "image_height",
      "label": "Alto de las imágenes (px)",
      "min": 100,
      "max": 1000,
      "step": 10,
      "default": 600
    }
  ],
  "presets": [
    {
      "name": "Custom - Carrusel de productos"
    }
  ]
}
{% endschema %}

<div class="custom-product-carousel">
  <div class="title-container">
    <h2>{{ section.settings.title }}</h2>
  </div>
  <div class="carousel-container">
    <div class="carousel-track" id="carousel-track">
      {% if section.settings.collection %}
        {% assign products = section.settings.collection.products %}
        {% assign all_products = products | concat: products %}
        {% for product in all_products %}
          <div class="carousel-item">
            <a href="{{ product.url }}">
              <div class="product-image-container" style="width: {{ section.settings.image_width }}px; height: {{ section.settings.image_height }}px;">
                <img 
                  src="{{ product.featured_image | img_url: '600x' }}" 
                  alt="{{ product.title }}" 
                  class="primary-image" 
                  loading="lazy"
                >
                {% if product.images.size > 1 %}
                  <img 
                    src="{{ product.images[1] | img_url: '600x' }}" 
                    alt="{{ product.title }} - vista secundaria" 
                    class="secondary-image" 
                    loading="lazy"
                  >
                {% endif %}
              </div>

              <div class="carousel-info">
                <strong>{{ product.title }}</strong><br>

                <div class="price-container">
                  {% if product.compare_at_price > product.price %}
                    <span class="compare-price">{{ product.compare_at_price | money }}</span>
                    <span class="sale-price">{{ product.price | money }}</span>
                  {% else %}
                    <span class="regular-price">{{ product.price | money }}</span>
                  {% endif %}
                </div>
              </div>
            </a>
          </div>
        {% endfor %}
      {% else %}
        <p>No se ha seleccionado ninguna colección.</p>
      {% endif %}
    </div>
    <div class="dots-and-arrows">
      <div class="dots" id="dots"></div>

      <div class="arrows">
        <span class="arrow" onclick="moveSlide(-1)">←</span>
        <span class="arrow" onclick="moveSlide(1)">→</span>
      </div>
    </div>
  </div>
</div>

<style>
/* ... mismo CSS que ya tenías ... */
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const track = document.getElementById('carousel-track');
  const dotsContainer = document.getElementById('dots');
  const items = track.querySelectorAll('.carousel-item');
  const totalSlides = items.length;
  let currentSlide = 0;
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;
  let animationID = 0;

  function updateCarousel() {
    const slideWidth = items[0].offsetWidth + 20;
    track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;

    const dots = dotsContainer.querySelectorAll('.dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === (currentSlide % (totalSlides / 2)));
    });
  }

  function startDrag(e) {
    isDragging = true;
    startPos = getPositionX(e);
    prevTranslate = currentTranslate;
    track.style.transition = 'none';
    animationID = requestAnimationFrame(animation);
  }

  function drag(e) {
    if (isDragging) {
      const currentPosition = getPositionX(e);
      currentTranslate = prevTranslate + currentPosition - startPos;
    }
  }

  function endDrag() {
    if (isDragging) {
      isDragging = false;
      cancelAnimationFrame(animationID);
      const movedBy = currentTranslate - prevTranslate;
      const slideWidth = items[0].offsetWidth + 20;

      if (Math.abs(movedBy) > slideWidth / 4) {
        if (movedBy < 0) {
          currentSlide = (currentSlide + 1) % totalSlides;
        } else {
          currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        }
      }

      track.style.transition = 'transform 0.4s ease-in-out';
      updateCarousel();
    }
  }

  function getPositionX(e) {
    return e.type.includes('mouse') ? e.pageX : e.touches[0].clientX;
  }

  function animation() {
    track.style.transform = `translateX(${currentTranslate}px)`;
    animationID = requestAnimationFrame(animation);
  }

  track.addEventListener('mousedown', startDrag);
  track.addEventListener('touchstart', startDrag, { passive: true });
  track.addEventListener('mousemove', drag);
  track.addEventListener('touchmove', drag, { passive: true });
  track.addEventListener('mouseup', endDrag);
  track.addEventListener('touchend', endDrag);
  track.addEventListener('mouseleave', endDrag);

  window.moveSlide = function (direction) {
    currentSlide = (currentSlide + direction + totalSlides) % totalSlides;
    updateCarousel();
  };

  // Dots
  const halfSlides = totalSlides / 2;
  for (let i = 0; i < halfSlides; i++) {
    const dot = document.createElement('div');
    dot.classList.add('dot');
    if (i === 0) dot.classList.add('active');
    dot.addEventListener('click', () => {
      currentSlide = i;
      updateCarousel();
    });
    dotsContainer.appendChild(dot);
  }

  updateCarousel();
});
</script>
